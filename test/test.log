Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting PointTest
PointTest ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting BinaryElementsConstruction
BinaryElementsConstruction ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting StdIntegration
I check the simmetry of the quadrature nodes
I check the simmetry of the quadrature weights
StdIntegration ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting MapsTest
Creo la mappa da (-1, 1) a (1, 2)
Mappa creata
Provo l'inversa
2D test

Creo la mappa per il primo triangolo
Mappa creata
MapsTest ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting GeneralIntegration
Costruisco FElement
Inizializzo interval
GeneralIntegration ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting LegendreOrthonormality
Checking the orthogonality on the standard interval


Let's check the normality on the standard interval :
LegendreOrthonormality ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting ProjectionTest
Checking the basis orthogonality on the (0, 1) interval:
Checking the basis normality on the (0, 1) interval :
ProjectionTest ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting LibmeshRefinement
I start one refinement iteration on the first mesh element
LibmeshRefinement ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting ManualBinaryRefinement
I directly call the Interval refine method
ManualBinaryRefinement ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting BinaryRefinement
Starting Binary Tree hp Refinement with 10 degrees of freedom
Active Element of polinomial degree : 4
Active Element of polinomial degree : 6
I have started from a mesh with 2 elements; after refinement it has 22 elements, 2 of them are ACTIVE

Now I check the same thing with the active elements iteration
Nodi: 
0	0.5	
Elemento attivo di id # 0
Nodi: 
0.5	1	
Elemento attivo di id # 1
The mesh has 2 ACTIVE elements
Livelli di p refinement : 
4 6 
BinaryRefinement ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting libMesh file IO test
libMesh file IO test ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting FirstNotExactElement
Let's check the normality of the element #52 of the basis :
Integral: 2.27169e-26
FirstNotExactElement ended

Added plugin : libmesh_quadrature.so
Added plugin : libsandia_quadrature.so
Added plugin : libinterpolating_functions.so

Starting MuParser
MuParser ended

