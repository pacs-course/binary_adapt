#include "Register.h"

#include <iostream>

using namespace FiniteElements;
using namespace std;

namespace BinaryTree
{
	Register::Register()
	{
/*
		Registering std elements in template dependent factories; the registration is demanded to a function
		which guarantees that unuseful registrations are avoided
*/
//		TemplateDependentRegistration <FiniteElements::TrivialType> ();
		TemplateDependentRegistration <FiniteElements::LegendreType> ();

	};

	Register& Register::Instance()
	{
		static Register r;
		return r;
	};

	Register::~Register()
	{
#ifdef DESTRUCTOR_ALERT
		cout << "Distruggo Register" << endl;
#endif //DESTRUCTOR_ALERT
	};

} //namespace BinaryTree

/*
	I instantiate a global variable which does the registration
	I use the unnamed namespace to avoid conflicts
	This does not cause me any problem since I don't need this variable anywhere else
*/
namespace Banana
{
	auto& reg(BinaryTree::Register::Instance());

/*
	It does nothing
	Its only purpose is to show to the optimizer that the reg variable is used somewhere
	Otherwise the optimizer will not load reg, and so the registrations will not be done
*/
	void BananaFun()
	{
		(void)reg;
	};

}
