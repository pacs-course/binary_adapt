# -*- GetPot -*-
#-------------------------------------------------------
# Parameter for the binary tree adaptive algorithm
#-------------------------------------------------------
[binary_tree]

	[./algorithm]
		iteration_number = 50
		tolerance = 0.0
		input_mesh = mesh_files/square.msh
		output_mesh = results/refined_square.msh
	[../]

	[./functions]
		############################################
		##	available:	"interpolating_functions"	##
		############################################
		func_library = interpolating_functions

		#####################################################
		##	available:	"sqrt_x"										##
		##					"x_squared"									##
		##					"x_exp_beta<40>"							##
		##					"half_step"									##
		##					"half_x"										##
		##					"half_square"								##
		##					"half_sqrt_x"								##
		##					"half_twenty"								##
		##					"advection_diffusion_solution<100>"	##
		##					"advection_diffusion_solution<-100>"##
		##																	##
		##					"mu_parser_expr"							##
		##																	##
		##	To configure the mu_parser_expr you have to		##
		##	write in func_library configuration file			##
		#####################################################
		#functor = mu_parser_expr
		functor = x_exp_beta<40>
	[../]

	[./mesh]
		################################
		##	available:	"mesh_bridge"	##
		################################
		mesh_library = mesh_bridge
	[../]

	[./quadrature]

		#TODO: add the quadrature type, now only gaussian is available,
		#TODO: if two different libraries try to register with the same key,
		#		 the item available will be the one of the last library loaded;
		#		 because of this, if two libraries both register two items with
		#		 the two same keys (i.e. both sandia and libMesh register their rule
		#		 for intervals and their one for squares), it will be impossible to use
		#		 one library for the first key and the other library for the second one,
		#		 since the first two ones registered by the first library will be overwritten
 
		[./interval]
			######################################
			##	available:	"mesh_quadrature"		##
			##					"sandia_quadrature"  ##
			######################################
			quad_library = sandia_quadrature
		[../]

		[./square]
			######################################
			##	available:	"sandia_quadrature"  ##
			##					"mesh_quadrature"		##
			######################################
			quad_library = sandia_quadrature
		[../]

		[./triangle]
			######################################
			##	available:	"mesh_quadrature"		##
			######################################
			quad_library = mesh_quadrature
		[../]

	[../]

[../]
