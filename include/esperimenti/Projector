#ifndef __PROJECTOR_H
#define __PROJECTOR_H

#include "BinaryTreeElements.h"
#include "Quadrature.h"

#include <stdexcept> //length_error

namespace BinaryTree
{
	using namespace Quadrature;

	template <size_t DIM>
			vector<double> project( const function<double(Point<DIM>)>& f, const FElement<DIM>& el, size_t p)
			{
				BasisBuilder& builder (BasisBuilder::Instance());
				PolinomialBasis<DIM>& basis = builder.setBasis(p);
				vector<double> projectionCoeff;
				for (auto el : basis)
				{
					//TODO: give a generic formulation for the coefficients independent on the basis type
					double coeff = L2product(f, el);
					projectionCoeff.push_back(coeff);
				}
				return projectionCoeff;
			};

	template <size_t DIM>
		double L2error(const function<double(Point<DIM>)>& f, const FElement<DIM>& el, size_t p)
		{
			auto projection = project(f, el, p);
			return integrate	(el, [&&](const Point<DIM>& point)
																				{
																					return ( f(point) - projection(point) )^2;
																				}
									);
		};

} //namespace BinaryTree

#endif //__PROJECTOR_H
