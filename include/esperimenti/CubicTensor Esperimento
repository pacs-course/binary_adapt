#ifndef __CUBIC_T_H
#define __CUBIC_T_H

#include <functional> //function
#include <type_traits> //enable_if

#include "Tensorize.h"

using namespace std;

namespace Geometry
{
	template <typename T, size_t DIM>
		class CubicTensor : public Tensor<T, DIM>
		{
			public:
				//constructors for cubic tensor
				CubicTensor(size_t length);

				template <class Container>
					CubicTensor(Container v);

			private:
				//tensorize for cubic tensor
				template <class Container>
					void tensorize (	Container vec,
											function< T (T&, T&) > prod =	[]
																					(	
																						T& val1,
																						T& val2
																					)
																					{return val1 * val2;},
											size_t iterate = DIM
										);
		};


	template <typename T, size_t DIM>
		CubicTensor<T, DIM>::CubicTensor(size_t length)	//:	Tensor<T, DIM> (array<size_t, DIM> a().fill(length))
		{
			Tensor<T, DIM>::_arrayLength = (pow(length, DIM));
			Tensor<T, DIM>::_tData = move(new T[Tensor<T, DIM>::_arrayLength]);
			Tensor<T, DIM>::_lengths.fill(length);
		};

	template <typename T, size_t DIM>
		template <class Container>
			CubicTensor<T, DIM>::CubicTensor(Container v)	:	CubicTensor(v.size())
																			{
																				tensorize(v);
																			};

	///////////////////////////////////////TO BE OPTIMIZED
	template <typename T, size_t DIM>
		template <class V>
			void CubicTensor<T, DIM>::tensorize(V vec, function< T (T& ,T&) > prod, size_t iterate)
			{
				size_t i(0);
				size_t step = 1;
				for (size_t ind = 0; ind < Tensor<T, DIM>::_arrayLength; ++ind)
					Tensor<T, DIM>::_tData[ind] = 1;

				while (iterate)
				{
					for (size_t iter = 0; iter < Tensor<T, DIM>::_arrayLength / step; ++iter)
					{
						for (auto val : vec)
						{
							for (size_t j = 0; j < step; ++j)
								Tensor<T, DIM>::_tData[j*i] = prod (Tensor<T, DIM>::_tData[j*i], val);
							++i;
						}
					}
					step *= Tensor<T, DIM>::_lengths[DIM - iterate];
					--iterate;
				}
			}
	//////////////////////////////////////////////////////////

}

#endif //__CUBIC_T_H
